// =====================================================
// CONFIGURA√á√ÉO DA OPENAI
// =====================================================

import OpenAI from 'openai';
import type { DiseaseOfTheDay, UserQuestion, HintRequest } from '@/types';

// Valida√ß√£o da API key
const apiKey = process.env.OPENAI_API_KEY;
if (!apiKey) {
  throw new Error('OPENAI_API_KEY is not configured');
}

// Cliente OpenAI
export const openai = new OpenAI({
  apiKey: apiKey,
});

// =====================================================
// CONFIGURA√á√ïES DOS MODELOS
// =====================================================
export const OPENAI_CONFIG = {
  model: 'gpt-4o-mini', // Modelo mais econ√¥mico e eficiente
  maxTokens: 1500,
  temperature: 0.9, // Aumentado para mais varia√ß√£o
} as const;

// =====================================================
// PROMPTS ESPECIALIZADOS
// =====================================================

/**
 * Prompt para gerar a doen√ßa do dia
 */
export const GENERATE_DISEASE_PROMPT = `
Voc√™ √© um especialista em medicina que cria casos cl√≠nicos enigm√°ticos para um jogo educativo.

Sua tarefa √© gerar uma doen√ßa DIFERENTE e criar um caso cl√≠nico realista SEM REVELAR o nome da doen√ßa.

INSTRU√á√ïES IMPORTANTES:
1. Escolha uma doen√ßa real e clinicamente relevante
2. SEMPRE VARIE entre especialidades m√©dicas diferentes (cardiologia, neurologia, gastroenterologia, endocrinologia, pneumologia, dermatologia, hematologia, reumatologia, oncologia, etc.)
3. EVITE repetir doen√ßas comuns como Esclerose M√∫ltipla, Diabetes, Hipertens√£o
4. Prefira doen√ßas menos √≥bvias mas clinicamente relevantes
5. Crie um caso cl√≠nico narrativo como se fosse um paciente real
6. N√ÉO mencione o nome da doen√ßa na descri√ß√£o
7. Seja preciso e baseado em evid√™ncias m√©dicas

ESPECIALIDADES PARA VARIAR:
- Cardiologia: Miocardite, Pericardite, Insufici√™ncia Card√≠aca
- Pneumologia: Pneumot√≥rax, Embolia Pulmonar, Sarcoidose
- Gastroenterologia: Doen√ßa de Crohn, Pancreatite, Hepatite
- Endocrinologia: S√≠ndrome de Cushing, Hipertireoidismo, Addison
- Hematologia: Anemia Falciforme, Leucemia, Trombocitopenia
- Reumatologia: Artrite Reumatoide, L√∫pus, Fibromialgia
- Dermatologia: Psor√≠ase, Melanoma, Dermatite
- Neurologia: Parkinson, Epilepsia, Miastenia Gravis
- Nefrologia: Glomerulonefrite, S√≠ndrome Nefr√≥tica
- E muitas outras...

FORMATO DE RESPOSTA (JSON):
{
  "disease_name": "Nome exato da doen√ßa",
  "description": "Caso cl√≠nico narrativo sem revelar o diagn√≥stico. Descreva um paciente fict√≠cio apresentando os sintomas, hist√≥ria cl√≠nica, exame f√≠sico inicial. Use linguagem m√©dica mas SEM nomear a doen√ßa. (150-200 palavras)",
  "main_symptoms": ["Sintoma 1", "Sintoma 2", "Sintoma 3", "Sintoma 4", "Sintoma 5"],
  "risk_factors": ["Fator 1", "Fator 2", "Fator 3", "Fator 4"],
  "differential_diagnoses": ["Diagn√≥stico 1", "Diagn√≥stico 2", "Diagn√≥stico 3", "Diagn√≥stico 4"],
  "treatment": "Abordagem terap√™utica completa (100-150 palavras)"
}

EXEMPLO de descri√ß√£o adequada:
"Paciente feminina, 28 anos, procura atendimento com queixas de fadiga progressiva h√° 6 meses, epis√≥dios de vis√£o turva intermitente e sensa√ß√£o de formigamento em membros inferiores. Relata que os sintomas pioram em dias quentes e ap√≥s exerc√≠cios. No exame neurol√≥gico, apresenta reflexos hiperativos e sinal de Babinski positivo bilateralmente. A resson√¢ncia magn√©tica do cr√¢nio revela les√µes hipersintensas periventriculares em T2."

IMPORTANTE:
- N√ÉO mencione o nome da doen√ßa na descri√ß√£o
- Crie um caso cl√≠nico realista e desafiador
- Use terminologia m√©dica apropriada
- Mantenha o mist√©rio diagn√≥stico
- Responda APENAS com JSON v√°lido
`;

/**
 * Prompt para responder perguntas sim/n√£o
 */
export const QUESTION_ANSWER_PROMPT = `
Voc√™ √© um m√©dico especialista respondendo perguntas sobre um caso cl√≠nico espec√≠fico.

CONTEXTO DA DOEN√áA:
{disease_context}

INSTRU√á√ÉO:
Responda APENAS "Sim", "N√£o" ou "Pergunta inv√°lida" baseado nas informa√ß√µes da doen√ßa fornecida.

REGRAS:
1. N√ÉO mencione o nome da doen√ßa na resposta
2. N√ÉO responda com "Sim" ou "N√£o" se a pergunta for sobre o NOME DA DOEN√áA
3. Responda "Sim" se a pergunta for verdadeira para esta doen√ßa
4. Responda "N√£o" se a pergunta for falsa para esta doen√ßa  
5. Responda "Pergunta inv√°lida" se:
   - A pergunta n√£o puder ser respondida com sim/n√£o
   - A pergunta n√£o for clinicamente relevante
   - A informa√ß√£o n√£o estiver dispon√≠vel no contexto fornecido

PERGUNTA DO USU√ÅRIO: {user_question}

RESPOSTA (apenas uma palavra):
`;

/**
 * Prompt para gerar dicas progressivas
 */
export const GENERATE_HINT_PROMPT = `
Voc√™ √© um professor de medicina criando dicas educativas para ajudar estudantes a diagnosticar uma doen√ßa.

CONTEXTO DA DOEN√áA:
{disease_context}

INSTRU√á√ïES:
- N√ÉO mencione o nome da doen√ßa na descri√ß√£o
- Crie uma dica progressiva (dica n√∫mero {hint_number} de 3)
- Dica 1: Mais sutil, categoria/sistema afetado
- Dica 2: Mais espec√≠fica, sintomas caracter√≠sticos
- Dica 3: Mais direta, quase reveladora

DICAS ANTERIORES: {previous_hints}

FORMATO DE RESPOSTA:
Forne√ßa uma dica educativa de 1-2 frases que ajude o estudante sem revelar completamente a resposta.

DICA {hint_number}:
`;

// =====================================================
// FUN√á√ïES PRINCIPAIS
// =====================================================

/**
 * Gera uma nova doen√ßa do dia usando OpenAI (com controle de repeti√ß√µes)
 */
export async function generateDiseaseOfTheDay(recentDiseases: string[] = []): Promise<DiseaseOfTheDay> {
  try {
    // Adiciona instru√ß√µes para evitar doen√ßas recentes
    let enhancedPrompt = GENERATE_DISEASE_PROMPT;
    
    if (recentDiseases.length > 0) {
      enhancedPrompt += `\n\nIMPORTANTE - EVITE AS SEGUINTES DOEN√áAS (j√° foram usadas recentemente):
${recentDiseases.map(disease => `- ${disease}`).join('\n')}

ESCOLHA UMA DOEN√áA COMPLETAMENTE DIFERENTE das listadas acima.\n`;
    }

    // Adiciona varia√ß√£o baseada no timestamp para mais randomiza√ß√£o
    const timestamp = Date.now();
    const seedMessage = `Timestamp para varia√ß√£o: ${timestamp}. Use este valor para gerar maior diversidade.`;

    const completion = await openai.chat.completions.create({
      model: OPENAI_CONFIG.model,
      messages: [
        {
          role: 'system',
          content: enhancedPrompt,
        },
        {
          role: 'user',
          content: seedMessage,
        },
      ],
      max_tokens: OPENAI_CONFIG.maxTokens,
      temperature: OPENAI_CONFIG.temperature,
      response_format: { type: 'json_object' },
      // Adiciona par√¢metros para mais varia√ß√£o
      top_p: 0.95,
      frequency_penalty: 0.8, // Penaliza repeti√ß√µes
      presence_penalty: 0.6,  // Encoraja novos t√≥picos
    });

    const content = completion.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No content received from OpenAI');
    }

    const diseaseData = JSON.parse(content);
    
    // Valida√ß√£o b√°sica dos dados
    if (!diseaseData.disease_name || !diseaseData.description) {
      throw new Error('Invalid disease data received from OpenAI');
    }

    // Verifica se a doen√ßa gerada est√° na lista de evitadas
    if (recentDiseases.some(recent => 
      recent.toLowerCase().includes(diseaseData.disease_name.toLowerCase()) ||
      diseaseData.disease_name.toLowerCase().includes(recent.toLowerCase())
    )) {
      console.warn(`‚ö†Ô∏è Generated disease "${diseaseData.disease_name}" is similar to recent ones. Retrying...`);
      
      // Retry uma vez com prompt mais espec√≠fico
      if (recentDiseases.length > 0) {
        return generateDiseaseOfTheDay(recentDiseases);
      }
    }

    // Adiciona campos necess√°rios para o banco
    const today = new Date().toISOString().split('T')[0];
    
    console.log(`üéØ Generated unique disease: ${diseaseData.disease_name} (avoiding: ${recentDiseases.join(', ')})`);
    
    return {
      id: '', // Ser√° gerado pelo banco
      date: today,
      disease_name: diseaseData.disease_name,
      description: diseaseData.description,
      main_symptoms: diseaseData.main_symptoms || [],
      risk_factors: diseaseData.risk_factors || [],
      differential_diagnoses: diseaseData.differential_diagnoses || [],
      treatment: diseaseData.treatment,
      created_at: new Date().toISOString(),
    };
  } catch (error) {
    console.error('Error generating disease:', error);
    throw new Error('Failed to generate disease of the day');
  }
}

/**
 * Responde pergunta sim/n√£o sobre a doen√ßa
 */
export async function answerYesNoQuestion(
  question: string,
  diseaseData: DiseaseOfTheDay
): Promise<'Sim' | 'N√£o' | 'Pergunta inv√°lida'> {
  try {
    const diseaseContext = `
DOEN√áA: ${diseaseData.disease_name}
DESCRI√á√ÉO: ${diseaseData.description}
SINTOMAS: ${diseaseData.main_symptoms.join(', ')}
FATORES DE RISCO: ${diseaseData.risk_factors.join(', ')}
DIAGN√ìSTICOS DIFERENCIAIS: ${diseaseData.differential_diagnoses.join(', ')}
TRATAMENTO: ${diseaseData.treatment}
    `.trim();

    const prompt = QUESTION_ANSWER_PROMPT
      .replace('{disease_context}', diseaseContext)
      .replace('{user_question}', question);

    const completion = await openai.chat.completions.create({
      model: OPENAI_CONFIG.model,
      messages: [
        {
          role: 'system',
          content: prompt,
        },
      ],
      max_tokens: 10,
      temperature: 0.1, // Baixa temperatura para respostas consistentes
    });

    const content = completion.choices[0]?.message?.content?.trim() || '';
    
    // Normaliza a resposta
    if (content.toLowerCase().includes('sim')) return 'Sim';
    if (content.toLowerCase().includes('n√£o') || content.toLowerCase().includes('nao')) return 'N√£o';
    return 'Pergunta inv√°lida';
    
  } catch (error) {
    console.error('Error answering question:', error);
    return 'Pergunta inv√°lida';
  }
}

/**
 * Gera dica progressiva sobre a doen√ßa
 */
export async function generateHint(
  diseaseData: DiseaseOfTheDay,
  hintNumber: number,
  previousHints: string[] = []
): Promise<string> {
  try {
    const diseaseContext = `
DOEN√áA: ${diseaseData.disease_name}
DESCRI√á√ÉO: ${diseaseData.description}
SINTOMAS: ${diseaseData.main_symptoms.join(', ')}
FATORES DE RISCO: ${diseaseData.risk_factors.join(', ')}
DIAGN√ìSTICOS DIFERENCIAIS: ${diseaseData.differential_diagnoses.join(', ')}
TRATAMENTO: ${diseaseData.treatment}
    `.trim();

    const prompt = GENERATE_HINT_PROMPT
      .replace('{disease_context}', diseaseContext)
      .replace('{hint_number}', hintNumber.toString())
      .replace('{previous_hints}', previousHints.join(' | '));

    const completion = await openai.chat.completions.create({
      model: OPENAI_CONFIG.model,
      messages: [
        {
          role: 'system',
          content: prompt,
        },
      ],
      max_tokens: 150,
      temperature: 0.7,
    });

    const content = completion.choices[0]?.message?.content?.trim();
    if (!content) {
      throw new Error('No hint content received from OpenAI');
    }

    return content;
  } catch (error) {
    console.error('Error generating hint:', error);
    throw new Error('Failed to generate hint');
  }
}

/**
 * Verifica se um palpite est√° correto
 */
export function checkGuess(guess: string, correctAnswer: string): boolean {
  const normalizeString = (str: string) => 
    str.toLowerCase()
       .normalize('NFD')
       .replace(/[\u0300-\u036f]/g, '') // Remove acentos
       .replace(/[^a-z0-9\s]/g, '') // Remove pontua√ß√£o
       .trim();

  const normalizedGuess = normalizeString(guess);
  const normalizedAnswer = normalizeString(correctAnswer);

  // Verifica correspond√™ncia exata
  if (normalizedGuess === normalizedAnswer) return true;

  // Verifica se o palpite cont√©m a resposta ou vice-versa
  if (normalizedGuess.includes(normalizedAnswer) || normalizedAnswer.includes(normalizedGuess)) {
    return true;
  }

  // Verifica palavras-chave importantes (pelo menos 70% de correspond√™ncia)
  const guessWords = normalizedGuess.split(/\s+/).filter(word => word.length > 2);
  const answerWords = normalizedAnswer.split(/\s+/).filter(word => word.length > 2);
  
  if (guessWords.length === 0 || answerWords.length === 0) return false;

  const matchingWords = guessWords.filter(word => 
    answerWords.some(answerWord => 
      word.includes(answerWord) || answerWord.includes(word)
    )
  );

  const matchPercentage = matchingWords.length / Math.max(guessWords.length, answerWords.length);
  return matchPercentage >= 0.7;
}

/**
 * Calcula pontua√ß√£o baseada no desempenho
 */
export function calculateScore(
  attemptsLeft: number,
  hintsUsed: number,
  maxAttempts: number = 3,
  maxHints: number = 3
): number {
  const baseScore = 300;
  const attemptPenalty = (maxAttempts - attemptsLeft) * 50;
  const hintPenalty = hintsUsed * 25;
  
  return Math.max(0, baseScore - attemptPenalty - hintPenalty);
} 